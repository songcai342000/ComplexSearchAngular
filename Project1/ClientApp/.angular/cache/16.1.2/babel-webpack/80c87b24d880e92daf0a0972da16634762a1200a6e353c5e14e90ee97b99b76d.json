{"ast":null,"code":"'use strict';\n\nconst BYTE_UNITS = ['B', 'kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\nconst BIBYTE_UNITS = ['B', 'kiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB'];\nconst BIT_UNITS = ['b', 'kbit', 'Mbit', 'Gbit', 'Tbit', 'Pbit', 'Ebit', 'Zbit', 'Ybit'];\nconst BIBIT_UNITS = ['b', 'kibit', 'Mibit', 'Gibit', 'Tibit', 'Pibit', 'Eibit', 'Zibit', 'Yibit'];\n\n/*\nFormats the given number using `Number#toLocaleString`.\n- If locale is a string, the value is expected to be a locale-key (for example: `de`).\n- If locale is true, the system default locale is used for translation.\n- If no value for locale is specified, the number is returned unmodified.\n*/\nconst toLocaleString = (number, locale, options) => {\n  let result = number;\n  if (typeof locale === 'string' || Array.isArray(locale)) {\n    result = number.toLocaleString(locale, options);\n  } else if (locale === true || options !== undefined) {\n    result = number.toLocaleString(undefined, options);\n  }\n  return result;\n};\nmodule.exports = (number, options) => {\n  if (!Number.isFinite(number)) {\n    throw new TypeError(`Expected a finite number, got ${typeof number}: ${number}`);\n  }\n  options = Object.assign({\n    bits: false,\n    binary: false\n  }, options);\n  const UNITS = options.bits ? options.binary ? BIBIT_UNITS : BIT_UNITS : options.binary ? BIBYTE_UNITS : BYTE_UNITS;\n  if (options.signed && number === 0) {\n    return ` 0 ${UNITS[0]}`;\n  }\n  const isNegative = number < 0;\n  const prefix = isNegative ? '-' : options.signed ? '+' : '';\n  if (isNegative) {\n    number = -number;\n  }\n  let localeOptions;\n  if (options.minimumFractionDigits !== undefined) {\n    localeOptions = {\n      minimumFractionDigits: options.minimumFractionDigits\n    };\n  }\n  if (options.maximumFractionDigits !== undefined) {\n    localeOptions = Object.assign({\n      maximumFractionDigits: options.maximumFractionDigits\n    }, localeOptions);\n  }\n  if (number < 1) {\n    const numberString = toLocaleString(number, options.locale, localeOptions);\n    return prefix + numberString + ' ' + UNITS[0];\n  }\n  const exponent = Math.min(Math.floor(options.binary ? Math.log(number) / Math.log(1024) : Math.log10(number) / 3), UNITS.length - 1);\n  // eslint-disable-next-line unicorn/prefer-exponentiation-operator\n  number /= Math.pow(options.binary ? 1024 : 1000, exponent);\n  if (!localeOptions) {\n    number = number.toPrecision(3);\n  }\n  const numberString = toLocaleString(Number(number), options.locale, localeOptions);\n  const unit = UNITS[exponent];\n  return prefix + numberString + ' ' + unit;\n};","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}