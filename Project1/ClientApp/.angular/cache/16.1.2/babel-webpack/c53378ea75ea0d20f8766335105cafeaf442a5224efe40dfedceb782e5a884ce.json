{"ast":null,"code":"import { CommonEngine } from '@nguniversal/common/engine';\nimport { REQUEST, RESPONSE } from '@nguniversal/express-engine/tokens';\n\n/**\n * This is an express engine for handling Angular Applications\n */\nfunction ngExpressEngine(setupOptions) {\n  const engine = new CommonEngine(setupOptions.bootstrap, setupOptions.providers);\n  return function (filePath, options, callback) {\n    try {\n      const renderOptions = {\n        ...options\n      };\n      if (!setupOptions.bootstrap && !renderOptions.bootstrap) {\n        throw new Error('You must pass in a NgModule to be bootstrapped');\n      }\n      const {\n        req\n      } = renderOptions;\n      const res = renderOptions.res ?? req.res;\n      renderOptions.url = renderOptions.url ?? `${req.protocol}://${req.get('host') || ''}${req.baseUrl}${req.url}`;\n      renderOptions.documentFilePath = renderOptions.documentFilePath ?? filePath;\n      renderOptions.providers = [...(renderOptions.providers ?? []), getReqResProviders(req, res)];\n      // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n      renderOptions.publicPath = renderOptions.publicPath ?? setupOptions.publicPath ?? options.settings?.views;\n      renderOptions.inlineCriticalCss = renderOptions.inlineCriticalCss ?? setupOptions.inlineCriticalCss;\n      engine.render(renderOptions).then(html => callback(null, html)).catch(callback);\n    } catch (err) {\n      callback(err);\n    }\n  };\n}\n/**\n * Get providers of the request and response\n */\nfunction getReqResProviders(req, res) {\n  const providers = [{\n    provide: REQUEST,\n    useValue: req\n  }];\n  if (res) {\n    providers.push({\n      provide: RESPONSE,\n      useValue: res\n    });\n  }\n  return providers;\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ngExpressEngine };\n//# sourceMappingURL=express-engine.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}