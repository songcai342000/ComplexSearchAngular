{"ast":null,"code":"import _asyncToGenerator from \"F:/repos/ComplexSearchAngular/Project1/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { concat, filter, first, interval } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/service-worker\";\nexport class CheckForUpdateService {\n  constructor(appRef, updates) {\n    // Allow the app to stabilize first, before starting\n    // polling for updates with `interval()`.\n    const appIsStable$ = appRef.isStable.pipe(first(isStable => isStable === true));\n    const everySixHours$ = interval(24 * 60 * 60 * 1000); //check every 24 hours\n    const everySixHoursOnceAppIsStable$ = concat(appIsStable$, everySixHours$);\n    everySixHoursOnceAppIsStable$.subscribe( /*#__PURE__*/_asyncToGenerator(function* () {\n      try {\n        const updateFound = yield updates.checkForUpdate();\n        if (updateFound) {\n          updates.versionUpdates.pipe(filter(evt => evt.type === 'VERSION_READY')).subscribe(() => {\n            if (confirm(\"New version is found, update now!\")) {\n              // Reload the page to update to the latest version.\n              document.location.reload();\n            }\n          });\n        }\n      } catch (err) {\n        console.error('Failed to check for updates:', err);\n      }\n    }));\n  }\n}\nCheckForUpdateService.ɵfac = function CheckForUpdateService_Factory(t) {\n  return new (t || CheckForUpdateService)(i0.ɵɵinject(i0.ApplicationRef), i0.ɵɵinject(i1.SwUpdate));\n};\nCheckForUpdateService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CheckForUpdateService,\n  factory: CheckForUpdateService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["concat","filter","first","interval","CheckForUpdateService","constructor","appRef","updates","appIsStable$","isStable","pipe","everySixHours$","everySixHoursOnceAppIsStable$","subscribe","_asyncToGenerator","updateFound","checkForUpdate","versionUpdates","evt","type","confirm","document","location","reload","err","console","error","i0","ɵɵinject","ApplicationRef","i1","SwUpdate","factory","ɵfac","providedIn"],"sources":["F:\\repos\\ComplexSearchAngular\\Project1\\ClientApp\\src\\app\\Services\\check-for-update.service.ts"],"sourcesContent":["import { ApplicationRef, Injectable } from '@angular/core';\r\nimport { SwUpdate, VersionReadyEvent } from '@angular/service-worker';\r\nimport { concat, filter, first, interval } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CheckForUpdateService {\r\n  constructor(appRef: ApplicationRef, updates: SwUpdate) {\r\n    // Allow the app to stabilize first, before starting\r\n    // polling for updates with `interval()`.\r\n    const appIsStable$ = appRef.isStable.pipe(first(isStable => isStable === true));\r\n    const everySixHours$ = interval(24*60*60*1000);//check every 24 hours\r\n    const everySixHoursOnceAppIsStable$ = concat(appIsStable$, everySixHours$);\r\n\r\n    everySixHoursOnceAppIsStable$.subscribe(async () => {\r\n      try {\r\n        const updateFound = await updates.checkForUpdate();\r\n        if (updateFound) {\r\n          updates.versionUpdates\r\n            .pipe(filter((evt): evt is VersionReadyEvent => evt.type === 'VERSION_READY'))\r\n            .subscribe(() => {\r\n              if (confirm(\"New version is found, update now!\")) {\r\n                // Reload the page to update to the latest version.\r\n                document.location.reload();\r\n              }\r\n            });\r\n        }\r\n      } catch (err) {\r\n        console.error('Failed to check for updates:', err);\r\n      }\r\n    });\r\n  }\r\n}\r\n"],"mappings":";AAEA,SAASA,MAAM,EAAEC,MAAM,EAAEC,KAAK,EAAEC,QAAQ,QAAQ,MAAM;;;AAKtD,OAAM,MAAOC,qBAAqB;EAChCC,YAAYC,MAAsB,EAAEC,OAAiB;IACnD;IACA;IACA,MAAMC,YAAY,GAAGF,MAAM,CAACG,QAAQ,CAACC,IAAI,CAACR,KAAK,CAACO,QAAQ,IAAIA,QAAQ,KAAK,IAAI,CAAC,CAAC;IAC/E,MAAME,cAAc,GAAGR,QAAQ,CAAC,EAAE,GAAC,EAAE,GAAC,EAAE,GAAC,IAAI,CAAC,CAAC;IAC/C,MAAMS,6BAA6B,GAAGZ,MAAM,CAACQ,YAAY,EAAEG,cAAc,CAAC;IAE1EC,6BAA6B,CAACC,SAAS,eAAAC,iBAAA,CAAC,aAAW;MACjD,IAAI;QACF,MAAMC,WAAW,SAASR,OAAO,CAACS,cAAc,EAAE;QAClD,IAAID,WAAW,EAAE;UACfR,OAAO,CAACU,cAAc,CACnBP,IAAI,CAACT,MAAM,CAAEiB,GAAG,IAA+BA,GAAG,CAACC,IAAI,KAAK,eAAe,CAAC,CAAC,CAC7EN,SAAS,CAAC,MAAK;YACd,IAAIO,OAAO,CAAC,mCAAmC,CAAC,EAAE;cAChD;cACAC,QAAQ,CAACC,QAAQ,CAACC,MAAM,EAAE;;UAE9B,CAAC,CAAC;;OAEP,CAAC,OAAOC,GAAG,EAAE;QACZC,OAAO,CAACC,KAAK,CAAC,8BAA8B,EAAEF,GAAG,CAAC;;IAEtD,CAAC,EAAC;EACJ;;AAzBWpB,qBAAqB,C;mBAArBA,qBAAqB,EAAAuB,EAAA,CAAAC,QAAA,CAAAD,EAAA,CAAAE,cAAA,GAAAF,EAAA,CAAAC,QAAA,CAAAE,EAAA,CAAAC,QAAA;AAAA;AAArB3B,qBAAqB,C;SAArBA,qBAAqB;EAAA4B,OAAA,EAArB5B,qBAAqB,CAAA6B,IAAA;EAAAC,UAAA,EAFpB;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}