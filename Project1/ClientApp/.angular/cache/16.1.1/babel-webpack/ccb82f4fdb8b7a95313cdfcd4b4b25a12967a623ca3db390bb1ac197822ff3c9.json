{"ast":null,"code":"import _asyncToGenerator from \"F:/repos/ComplexSearchAngular/Project1/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { concat, filter, first, interval } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/service-worker\";\nexport let CheckForUpdateService = /*#__PURE__*/(() => {\n  class CheckForUpdateService {\n    constructor(appRef, updates) {\n      // Allow the app to stabilize first, before starting\n      // polling for updates with `interval()`.\n      const appIsStable$ = appRef.isStable.pipe(first(isStable => isStable === true));\n      const everySixHours$ = interval(10000);\n      const everySixHoursOnceAppIsStable$ = concat(appIsStable$, everySixHours$);\n      everySixHoursOnceAppIsStable$.subscribe( /*#__PURE__*/_asyncToGenerator(function* () {\n        try {\n          const updateFound = yield updates.checkForUpdate();\n          if (updateFound) {\n            alert(updateFound);\n            updates.versionUpdates.pipe(filter(evt => evt.type === 'VERSION_READY')).subscribe(() => {\n              if (confirm(\"New version is found, update now!\")) {\n                // Reload the page to update to the latest version.\n                alert(100);\n                alert(22);\n                document.location.reload();\n              }\n            });\n          }\n        } catch (err) {\n          console.error('Failed to check for updates:', err);\n        }\n      }));\n    }\n  }\n  CheckForUpdateService.ɵfac = function CheckForUpdateService_Factory(t) {\n    return new (t || CheckForUpdateService)(i0.ɵɵinject(i0.ApplicationRef), i0.ɵɵinject(i1.SwUpdate));\n  };\n  CheckForUpdateService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CheckForUpdateService,\n    factory: CheckForUpdateService.ɵfac,\n    providedIn: 'root'\n  });\n  return CheckForUpdateService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}